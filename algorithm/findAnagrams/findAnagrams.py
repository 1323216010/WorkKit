from typing import Listclass Solution:    def findAnagrams(self, s: str, p: str) -> List[int]:        s_len, p_len = len(s), len(p)        if s_len < p_len:            return []        ans = []        dict1 = {}        for char in p:            dict1[char] = dict1.get(char, 0) + 1        t_chars = s[0:0 + p_len]        dict2 = {}        for char in t_chars:            dict2[char] = dict2.get(char, 0) + 1        if dict2 == dict1:            ans.append(0)        for i in range(s_len - p_len):            if dict2.get(s[i], 0) == 1:                del dict2[s[i]]            else:                dict2[s[i]] = dict2.get(s[i]) - 1            dict2[s[i + p_len]] = dict2.get(s[i + p_len], 0) + 1            if dict2 == dict1:                ans.append(i + 1)        return ans# 创建一个解决方案实例solution = Solution()# 定义测试用例test_cases = [    ("cbaebabacd", "abc"),    ("abab", "ab"),    ("", "a"),  # 测试空字符串情况]# 遍历测试用例，打印结果for s, p in test_cases:    print(f"s: {s}, p: {p}, Anagrams Start Indices: {solution.findAnagrams(s, p)}")